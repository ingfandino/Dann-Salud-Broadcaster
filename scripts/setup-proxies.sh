#!/bin/bash

# Script de Configuraci√≥n de Proxies - Dann Salud Broadcaster
# Facilita la configuraci√≥n de proxies √∫nicos por usuario

set -e

BACKEND_DIR="/home/dann-salud/Documentos/Dann-Salud-Broadcaster/backend"
ENV_FILE="$BACKEND_DIR/.env"
SESSION_DIR="/home/dann-salud/.wwebjs_auth_multi"

echo "=========================================="
echo "  Configuraci√≥n de Proxies Multi-Usuario"
echo "=========================================="
echo ""

# Funci√≥n para obtener IDs de usuarios
function get_user_ids() {
    echo "üìã Obteniendo IDs de usuarios de MongoDB..."
    echo ""
    
    mongosh --quiet dannsalud --eval "
        db.users.find({}, {_id: 1, username: 1, email: 1}).forEach(u => {
            print(u._id.toString().replace('ObjectId(\"', '').replace('\")', '') + ' | ' + u.username + ' | ' + u.email);
        });
    " | grep -v "^$"
}

# Funci√≥n para verificar proxy
function test_proxy() {
    local proxy_url=$1
    echo -n "Verificando proxy... "
    
    if curl -s -x "$proxy_url" --connect-timeout 5 http://ifconfig.me > /dev/null 2>&1; then
        local ip=$(curl -s -x "$proxy_url" --connect-timeout 5 http://ifconfig.me)
        echo "‚úÖ OK (IP: $ip)"
        return 0
    else
        echo "‚ùå FALL√ì"
        return 1
    fi
}

# Funci√≥n para agregar proxy al .env
function add_proxy_to_env() {
    local user_id=$1
    local proxy_url=$2
    
    # Verificar si ya existe
    if grep -q "PROXY_USER_$user_id" "$ENV_FILE"; then
        echo "‚ö†Ô∏è  Ya existe configuraci√≥n para usuario $user_id"
        read -p "¬øSobrescribir? (s/n): " confirm
        if [[ $confirm != "s" ]]; then
            return
        fi
        # Eliminar l√≠nea existente
        sed -i "/PROXY_USER_$user_id/d" "$ENV_FILE"
    fi
    
    # Agregar nueva l√≠nea
    echo "PROXY_USER_$user_id=$proxy_url" >> "$ENV_FILE"
    echo "‚úÖ Configuraci√≥n agregada"
}

# Men√∫ principal
echo "Opciones:"
echo "1. Ver usuarios y sus IDs"
echo "2. Configurar proxy para usuario"
echo "3. Verificar configuraci√≥n de proxies"
echo "4. Probar todos los proxies"
echo "5. Limpiar sesiones antiguas"
echo "6. Reiniciar servidor"
echo "0. Salir"
echo ""
read -p "Selecciona una opci√≥n: " option

case $option in
    1)
        echo ""
        echo "üìã Usuarios registrados:"
        echo "=================================================="
        echo "ID                        | Usuario     | Email"
        echo "=================================================="
        get_user_ids
        echo "=================================================="
        ;;
        
    2)
        echo ""
        echo "üìù Configurar proxy para usuario"
        echo ""
        
        # Mostrar usuarios
        echo "Usuarios disponibles:"
        echo "=================================================="
        get_user_ids
        echo "=================================================="
        echo ""
        
        read -p "ID del usuario: " user_id
        read -p "URL del proxy (http://user:pass@host:port): " proxy_url
        
        echo ""
        
        # Verificar proxy
        if test_proxy "$proxy_url"; then
            add_proxy_to_env "$user_id" "$proxy_url"
        else
            echo "‚ùå El proxy no funciona. No se agregar√° a la configuraci√≥n."
            exit 1
        fi
        ;;
        
    3)
        echo ""
        echo "üîç Configuraci√≥n actual de proxies:"
        echo "=================================================="
        
        if grep -q "PROXY_USER_" "$ENV_FILE"; then
            grep "PROXY_USER_" "$ENV_FILE" | while read line; do
                user_id=$(echo "$line" | cut -d'=' -f1 | sed 's/PROXY_USER_//')
                proxy_url=$(echo "$line" | cut -d'=' -f2-)
                
                # Obtener username
                username=$(mongosh --quiet dannsalud --eval "
                    var ObjectId = require('mongodb').ObjectId;
                    var user = db.users.findOne({_id: ObjectId('$user_id')});
                    if (user) print(user.username); else print('(no encontrado)');
                " 2>/dev/null | tail -1)
                
                # Ocultar password en proxy
                safe_proxy=$(echo "$proxy_url" | sed 's/:\/\/.*@/:\/\/***@/')
                
                echo "Usuario: $username (ID: $user_id)"
                echo "Proxy:   $safe_proxy"
                echo ""
            done
        else
            echo "‚ö†Ô∏è  No hay proxies configurados"
        fi
        
        echo "=================================================="
        ;;
        
    4)
        echo ""
        echo "üß™ Probando todos los proxies configurados..."
        echo "=================================================="
        
        if grep -q "PROXY_USER_" "$ENV_FILE"; then
            all_ok=true
            
            grep "PROXY_USER_" "$ENV_FILE" | while read line; do
                user_id=$(echo "$line" | cut -d'=' -f1 | sed 's/PROXY_USER_//')
                proxy_url=$(echo "$line" | cut -d'=' -f2-)
                
                # Obtener username
                username=$(mongosh --quiet dannsalud --eval "
                    var ObjectId = require('mongodb').ObjectId;
                    var user = db.users.findOne({_id: ObjectId('$user_id')});
                    if (user) print(user.username); else print('(desconocido)');
                " 2>/dev/null | tail -1)
                
                echo -n "Usuario $username: "
                
                if ! test_proxy "$proxy_url"; then
                    all_ok=false
                fi
            done
            
            echo "=================================================="
            
            if $all_ok; then
                echo "‚úÖ Todos los proxies funcionan correctamente"
            else
                echo "‚ùå Algunos proxies tienen problemas"
            fi
        else
            echo "‚ö†Ô∏è  No hay proxies configurados"
        fi
        ;;
        
    5)
        echo ""
        echo "üßπ Limpiando sesiones antiguas..."
        
        if [ -d "$SESSION_DIR" ]; then
            read -p "¬øEst√°s seguro? Esto eliminar√° todas las sesiones de WhatsApp (s/n): " confirm
            if [[ $confirm == "s" ]]; then
                rm -rf "$SESSION_DIR"/*
                echo "‚úÖ Sesiones eliminadas"
                echo ""
                echo "‚ö†Ô∏è  Los usuarios deber√°n escanear QR nuevamente"
            else
                echo "Cancelado"
            fi
        else
            echo "‚ö†Ô∏è  No hay sesiones guardadas"
        fi
        ;;
        
    6)
        echo ""
        echo "üîÑ Reiniciando servidor..."
        
        # Detener servidor
        pkill -f "node.*server.js" 2>/dev/null && echo "‚úÖ Servidor detenido" || echo "‚ö†Ô∏è  Servidor no estaba corriendo"
        
        # Esperar un segundo
        sleep 1
        
        # Iniciar servidor en background
        cd "$BACKEND_DIR"
        nohup npm start > /dev/null 2>&1 &
        
        echo "‚úÖ Servidor iniciado"
        echo ""
        echo "Ver logs con: tail -f $BACKEND_DIR/logs/combined.log"
        ;;
        
    0)
        echo "Saliendo..."
        exit 0
        ;;
        
    *)
        echo "‚ùå Opci√≥n inv√°lida"
        exit 1
        ;;
esac

echo ""
echo "‚úÖ Operaci√≥n completada"
