openapi: 3.0.3
info:
  title: Dann-Salud Broadcaster API
  version: 1.0.0
  description: API para gestión de usuarios, jobs de envío por WhatsApp, logs y métricas.
servers:
  - url: http://localhost:5000
    description: Local development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        nombre:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, supervisor, asesor]
    AuthRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Contact:
      type: object
      properties:
        _id: { type: string }
        nombre: { type: string }
        telefono: { type: string }
    Template:
      type: object
      properties:
        _id: { type: string }
        nombre: { type: string }
        contenido: { type: string }
    SendJob:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        contacts: 
          type: array
          items: { type: string }
        status:
          type: string
          enum: [pending, running, paused, completed, canceled, failed]
        stats:
          type: object
          properties:
            sent: { type: integer }
            failed: { type: integer }

paths:
  /auth/register:
    post:
      summary: Registrar usuario (asesor)
      requestBody:
        required: true
        content:
          application/json:
            schema: $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Token + Usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/me:
    get:
      summary: Perfil autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users:
    get:
      summary: Listar usuarios (admin / supervisor)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios
    post:
      summary: Crear usuario (admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string }
      responses:
        '201': { description: Usuario creado }

  /users/{id}:
    get:
      summary: Obtener usuario por id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
    put:
      summary: Actualizar usuario
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: Actualizado }

  /contacts:
    get:
      summary: Listar contactos
      security:
        - bearerAuth: []
    post:
      summary: Crear contacto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'

  /send:
    post:
      summary: Crear y lanzar un SendJob (start)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                template: { type: string }
                contacts: 
                  type: array
                  items: { type: string }
                scheduledFor:
                  type: string
                  format: date-time
      responses:
        '201': { description: Job creado }
    get:
      summary: Listar jobs
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }

  /send/{id}:
    get:
      summary: Ver job
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
    post:
      summary: acciones (pause/resume/cancel) - rutas separadas preferible
      responses:
        '200': { description: OK }

  /whatsapp/qr:
    get:
      summary: Obtener QR actual (si el cliente no está autenticado)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: QR (base64/png o texto)

  /logs:
    get:
      summary: Obtener logs (filtros por tipo/fecha)
      security:
        - bearerAuth: []
    get:
      summary: Export logs CSV/JSON
      description: Rutas para exportar logs (ej.: /logs/export/csv)

security:
  - bearerAuth: []